from typing import Final

def do_savings(additional):
    RATE_ESTIMATE: Final = 0.06
    
    new_balance = do_savings.balance
    new_balance = new_balance + additional

    # 6% growth estimate per year in a single month.
    new_balance = new_balance + ((new_balance * RATE_ESTIMATE) / 12)

    do_savings.balance = new_balance

def do_mortgage(additional, month):
    new_balance = do_mortgage.balance
    new_balance = new_balance - additional

    # Equation generated by https://www.omnicalculator.com/statistics/exponential-regression using lender data
    principal = 347.8 * pow(1.004, month)
    new_balance = new_balance - principal

    do_mortgage.balance = new_balance
    return new_balance <= 0.0

def do_roof(additional, month):
    new_balance = do_roof.balance
    new_balance = new_balance - additional

    # Currently copied from mortgage and roughly set for initial roof payment
    # TODO - use a more proper payment estimation once loan is solid and data is available
    principal = 20 * pow(1.004, month)
    new_balance = new_balance - principal

    do_roof.balance = new_balance
    return new_balance <= 0.0

def run_sim(distributions):
    DURATION_MONTHS: Final = 12 * 25
    for i in range(DURATION_MONTHS):
        mortgage = distributions[0]
        if run_sim.mortgage_done: mortgage = mortgage + distributions[1]
        if run_sim.roof_done: mortgage = mortgage + distributions[2]

        do_savings(distributions[0])
        if not run_sim.mortgage_done: run_sim.mortgage_done = do_mortgage(distributions[1], i)
        if not run_sim.roof_done: run_sim.roof_done = do_roof(distributions[2], i)

def initialize():
    INITIAL_SAVINGS: Final = 36322
    INITIAL_MORTGAGE: Final = 210011
    INITIAL_ROOF: Final = 14000

    do_savings.balance = float(INITIAL_SAVINGS)
    do_mortgage.balance = float(INITIAL_MORTGAGE)
    do_roof.balance = float(INITIAL_ROOF)
    run_sim.mortgage_done = False
    run_sim.roof_done = False

TOTAL_DISTRIBUTION: Final = 2000

initialize()
allocate_distributions = [0, 0, 0] # [0] = retirement savings, [1] = mortgage, [2] = roof
data_out = open("sim_results.csv", "w")
data_out.write("savings-dist,mortgage-dist,roof-dist,savings-bal,mortgage-bal,roof-bal\n")

for i in range(0, TOTAL_DISTRIBUTION, 10):
    allocate_distributions[0] = i
    remaining = TOTAL_DISTRIBUTION - i
    for j in range(0, remaining, 10):
        allocate_distributions[1] = j
        allocate_distributions[2] = remaining - j
        run_sim(allocate_distributions)
        data_out.write(
            str(allocate_distributions[0]) + "," +
            str(allocate_distributions[1]) + "," +
            str(allocate_distributions[2]) + "," +
            str(do_savings.balance) + "," +
            str(do_mortgage.balance) + "," +
            str(do_roof.balance) +
            "\n"
        )
        initialize()
data_out.close()
